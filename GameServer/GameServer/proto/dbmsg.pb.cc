// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmsg.proto

#include "dbmsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace MyGameDB {
PROTOBUF_CONSTEXPR DBReqHead::DBReqHead(
    ::_pbi::ConstantInitialized)
  : type_(0)
{}
struct DBReqHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBReqHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBReqHeadDefaultTypeInternal() {}
  union {
    DBReqHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBReqHeadDefaultTypeInternal _DBReqHead_default_instance_;
PROTOBUF_CONSTEXPR DBRequest::DBRequest(
    ::_pbi::ConstantInitialized)
  : payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr){}
struct DBRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBRequestDefaultTypeInternal() {}
  union {
    DBRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBRequestDefaultTypeInternal _DBRequest_default_instance_;
PROTOBUF_CONSTEXPR QRsqHead::QRsqHead(
    ::_pbi::ConstantInitialized)
  : type_(0)

  , res_(0)
{}
struct QRsqHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QRsqHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QRsqHeadDefaultTypeInternal() {}
  union {
    QRsqHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QRsqHeadDefaultTypeInternal _QRsqHead_default_instance_;
PROTOBUF_CONSTEXPR DBResponse::DBResponse(
    ::_pbi::ConstantInitialized)
  : payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr){}
struct DBResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBResponseDefaultTypeInternal() {}
  union {
    DBResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBResponseDefaultTypeInternal _DBResponse_default_instance_;
PROTOBUF_CONSTEXPR DBReqQueryAccount::DBReqQueryAccount(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DBReqQueryAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBReqQueryAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBReqQueryAccountDefaultTypeInternal() {}
  union {
    DBReqQueryAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBReqQueryAccountDefaultTypeInternal _DBReqQueryAccount_default_instance_;
PROTOBUF_CONSTEXPR DBRspAccout::DBRspAccout(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , passwd_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u}){}
struct DBRspAccoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBRspAccoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBRspAccoutDefaultTypeInternal() {}
  union {
    DBRspAccout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBRspAccoutDefaultTypeInternal _DBRspAccout_default_instance_;
PROTOBUF_CONSTEXPR DBReqModAccount::DBReqModAccount(
    ::_pbi::ConstantInitialized)
  : account_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u}){}
struct DBReqModAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBReqModAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBReqModAccountDefaultTypeInternal() {}
  union {
    DBReqModAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBReqModAccountDefaultTypeInternal _DBReqModAccount_default_instance_;
PROTOBUF_CONSTEXPR DBReqQueryRole::DBReqQueryRole(
    ::_pbi::ConstantInitialized)
  : roleid_(uint64_t{0u}){}
struct DBReqQueryRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBReqQueryRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBReqQueryRoleDefaultTypeInternal() {}
  union {
    DBReqQueryRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBReqQueryRoleDefaultTypeInternal _DBReqQueryRole_default_instance_;
PROTOBUF_CONSTEXPR DBReqAddRole::DBReqAddRole(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u}){}
struct DBReqAddRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBReqAddRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBReqAddRoleDefaultTypeInternal() {}
  union {
    DBReqAddRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBReqAddRoleDefaultTypeInternal _DBReqAddRole_default_instance_;
PROTOBUF_CONSTEXPR DBRspRole::DBRspRole(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roleid_(uint64_t{0u})
  , level_(0){}
struct DBRspRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBRspRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBRspRoleDefaultTypeInternal() {}
  union {
    DBRspRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBRspRoleDefaultTypeInternal _DBRspRole_default_instance_;
}  // namespace MyGameDB
static ::_pb::Metadata file_level_metadata_dbmsg_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dbmsg_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dbmsg_2eproto = nullptr;

const uint32_t TableStruct_dbmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqHead, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRequest, head_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRequest, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::QRsqHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::QRsqHead, type_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::QRsqHead, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBResponse, head_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBResponse, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqQueryAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqQueryAccount, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspAccout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspAccout, account_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspAccout, passwd_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspAccout, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqModAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqModAccount, account_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqModAccount, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqQueryRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqQueryRole, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqAddRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqAddRole, roleid_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBReqAddRole, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspRole, roleid_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspRole, name_),
  PROTOBUF_FIELD_OFFSET(::MyGameDB::DBRspRole, level_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MyGameDB::DBReqHead)},
  { 7, -1, -1, sizeof(::MyGameDB::DBRequest)},
  { 15, -1, -1, sizeof(::MyGameDB::QRsqHead)},
  { 23, -1, -1, sizeof(::MyGameDB::DBResponse)},
  { 31, -1, -1, sizeof(::MyGameDB::DBReqQueryAccount)},
  { 38, -1, -1, sizeof(::MyGameDB::DBRspAccout)},
  { 47, -1, -1, sizeof(::MyGameDB::DBReqModAccount)},
  { 55, -1, -1, sizeof(::MyGameDB::DBReqQueryRole)},
  { 62, -1, -1, sizeof(::MyGameDB::DBReqAddRole)},
  { 70, -1, -1, sizeof(::MyGameDB::DBRspRole)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::MyGameDB::_DBReqHead_default_instance_._instance,
  &::MyGameDB::_DBRequest_default_instance_._instance,
  &::MyGameDB::_QRsqHead_default_instance_._instance,
  &::MyGameDB::_DBResponse_default_instance_._instance,
  &::MyGameDB::_DBReqQueryAccount_default_instance_._instance,
  &::MyGameDB::_DBRspAccout_default_instance_._instance,
  &::MyGameDB::_DBReqModAccount_default_instance_._instance,
  &::MyGameDB::_DBReqQueryRole_default_instance_._instance,
  &::MyGameDB::_DBReqAddRole_default_instance_._instance,
  &::MyGameDB::_DBRspRole_default_instance_._instance,
};

const char descriptor_table_protodef_dbmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013dbmsg.proto\022\010MyGameDB\".\n\tDBReqHead\022!\n\004"
  "type\030\001 \001(\0162\023.MyGameDB.DBReqType\"\?\n\tDBReq"
  "uest\022!\n\004head\030\001 \001(\0132\023.MyGameDB.DBReqHead\022"
  "\017\n\007payload\030\002 \001(\t\"Q\n\010QRsqHead\022!\n\004type\030\001 \001"
  "(\0162\023.MyGameDB.DBReqType\022\"\n\003res\030\002 \001(\0162\025.M"
  "yGameDB.DBErrorType\"\?\n\nDBResponse\022 \n\004hea"
  "d\030\001 \001(\0132\022.MyGameDB.QRsqHead\022\017\n\007payload\030\002"
  " \001(\t\"$\n\021DBReqQueryAccount\022\017\n\007account\030\001 \001"
  "(\t\">\n\013DBRspAccout\022\017\n\007account\030\001 \001(\t\022\016\n\006pa"
  "sswd\030\002 \001(\t\022\016\n\006roleid\030\003 \001(\004\"2\n\017DBReqModAc"
  "count\022\017\n\007account\030\001 \001(\t\022\016\n\006roleid\030\002 \001(\004\" "
  "\n\016DBReqQueryRole\022\016\n\006roleid\030\001 \001(\004\",\n\014DBRe"
  "qAddRole\022\016\n\006roleid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\"8"
  "\n\tDBRspRole\022\016\n\006roleid\030\001 \001(\004\022\014\n\004name\030\002 \001("
  "\t\022\r\n\005level\030\003 \001(\005*\?\n\013DBErrorType\022\014\n\010DBErr"
  "_OK\020\000\022\016\n\nDBErr_Fail\020\001\022\022\n\016DBErr_NotExist\020"
  "\002*\210\001\n\tDBReqType\022\025\n\021DBReqType_Default\020\000\022\032"
  "\n\026DBReqType_QueryAccount\020\001\022\030\n\024DBReqType_"
  "ModAccount\020\002\022\027\n\023DBReqType_QueryRole\020\003\022\025\n"
  "\021DBReqType_AddRole\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dbmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dbmsg_2eproto = {
    false, false, 788, descriptor_table_protodef_dbmsg_2eproto,
    "dbmsg.proto",
    &descriptor_table_dbmsg_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_dbmsg_2eproto::offsets,
    file_level_metadata_dbmsg_2eproto, file_level_enum_descriptors_dbmsg_2eproto,
    file_level_service_descriptors_dbmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dbmsg_2eproto_getter() {
  return &descriptor_table_dbmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dbmsg_2eproto(&descriptor_table_dbmsg_2eproto);
namespace MyGameDB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmsg_2eproto);
  return file_level_enum_descriptors_dbmsg_2eproto[0];
}
bool DBErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBReqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dbmsg_2eproto);
  return file_level_enum_descriptors_dbmsg_2eproto[1];
}
bool DBReqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DBReqHead::_Internal {
 public:
};

DBReqHead::DBReqHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBReqHead)
}
DBReqHead::DBReqHead(const DBReqHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBReqHead)
}

inline void DBReqHead::SharedCtor() {
type_ = 0;
}

DBReqHead::~DBReqHead() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBReqHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBReqHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBReqHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBReqHead::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBReqHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBReqHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGameDB.DBReqType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MyGameDB::DBReqType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBReqHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBReqHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGameDB.DBReqType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBReqHead)
  return target;
}

size_t DBReqHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBReqHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MyGameDB.DBReqType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBReqHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBReqHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBReqHead::GetClassData() const { return &_class_data_; }

void DBReqHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBReqHead *>(to)->MergeFrom(
      static_cast<const DBReqHead &>(from));
}


void DBReqHead::MergeFrom(const DBReqHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBReqHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBReqHead::CopyFrom(const DBReqHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBReqHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReqHead::IsInitialized() const {
  return true;
}

void DBReqHead::InternalSwap(DBReqHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBReqHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[0]);
}

// ===================================================================

class DBRequest::_Internal {
 public:
  static const ::MyGameDB::DBReqHead& head(const DBRequest* msg);
};

const ::MyGameDB::DBReqHead&
DBRequest::_Internal::head(const DBRequest* msg) {
  return *msg->head_;
}
DBRequest::DBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBRequest)
}
DBRequest::DBRequest(const DBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::MyGameDB::DBReqHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBRequest)
}

inline void DBRequest::SharedCtor() {
payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
head_ = nullptr;
}

DBRequest::~DBRequest() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void DBRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGameDB.DBReqHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBRequest.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGameDB.DBReqHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string payload = 2;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBRequest.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBRequest)
  return target;
}

size_t DBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  // .MyGameDB.DBReqHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRequest::GetClassData() const { return &_class_data_; }

void DBRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBRequest *>(to)->MergeFrom(
      static_cast<const DBRequest &>(from));
}


void DBRequest::MergeFrom(const DBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGameDB::DBReqHead::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRequest::CopyFrom(const DBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRequest::IsInitialized() const {
  return true;
}

void DBRequest::InternalSwap(DBRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[1]);
}

// ===================================================================

class QRsqHead::_Internal {
 public:
};

QRsqHead::QRsqHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.QRsqHead)
}
QRsqHead::QRsqHead(const QRsqHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&type_)) + sizeof(res_));
  // @@protoc_insertion_point(copy_constructor:MyGameDB.QRsqHead)
}

inline void QRsqHead::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&res_) -
    reinterpret_cast<char*>(&type_)) + sizeof(res_));
}

QRsqHead::~QRsqHead() {
  // @@protoc_insertion_point(destructor:MyGameDB.QRsqHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QRsqHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QRsqHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QRsqHead::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.QRsqHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_) -
      reinterpret_cast<char*>(&type_)) + sizeof(res_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QRsqHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGameDB.DBReqType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MyGameDB::DBReqType>(val));
        } else
          goto handle_unusual;
        continue;
      // .MyGameDB.DBErrorType res = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::MyGameDB::DBErrorType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QRsqHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.QRsqHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGameDB.DBReqType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .MyGameDB.DBErrorType res = 2;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.QRsqHead)
  return target;
}

size_t QRsqHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.QRsqHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MyGameDB.DBReqType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .MyGameDB.DBErrorType res = 2;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QRsqHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QRsqHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QRsqHead::GetClassData() const { return &_class_data_; }

void QRsqHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QRsqHead *>(to)->MergeFrom(
      static_cast<const QRsqHead &>(from));
}


void QRsqHead::MergeFrom(const QRsqHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.QRsqHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QRsqHead::CopyFrom(const QRsqHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.QRsqHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QRsqHead::IsInitialized() const {
  return true;
}

void QRsqHead::InternalSwap(QRsqHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QRsqHead, res_)
      + sizeof(QRsqHead::res_)
      - PROTOBUF_FIELD_OFFSET(QRsqHead, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QRsqHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[2]);
}

// ===================================================================

class DBResponse::_Internal {
 public:
  static const ::MyGameDB::QRsqHead& head(const DBResponse* msg);
};

const ::MyGameDB::QRsqHead&
DBResponse::_Internal::head(const DBResponse* msg) {
  return *msg->head_;
}
DBResponse::DBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBResponse)
}
DBResponse::DBResponse(const DBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::MyGameDB::QRsqHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBResponse)
}

inline void DBResponse::SharedCtor() {
payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
head_ = nullptr;
}

DBResponse::~DBResponse() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void DBResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGameDB.QRsqHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBResponse.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGameDB.QRsqHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string payload = 2;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBResponse.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBResponse)
  return target;
}

size_t DBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  // .MyGameDB.QRsqHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBResponse::GetClassData() const { return &_class_data_; }

void DBResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBResponse *>(to)->MergeFrom(
      static_cast<const DBResponse &>(from));
}


void DBResponse::MergeFrom(const DBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGameDB::QRsqHead::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBResponse::CopyFrom(const DBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBResponse::IsInitialized() const {
  return true;
}

void DBResponse::InternalSwap(DBResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[3]);
}

// ===================================================================

class DBReqQueryAccount::_Internal {
 public:
};

DBReqQueryAccount::DBReqQueryAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBReqQueryAccount)
}
DBReqQueryAccount::DBReqQueryAccount(const DBReqQueryAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBReqQueryAccount)
}

inline void DBReqQueryAccount::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBReqQueryAccount::~DBReqQueryAccount() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBReqQueryAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBReqQueryAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
}

void DBReqQueryAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBReqQueryAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBReqQueryAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBReqQueryAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBReqQueryAccount.account"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBReqQueryAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBReqQueryAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBReqQueryAccount.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBReqQueryAccount)
  return target;
}

size_t DBReqQueryAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBReqQueryAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBReqQueryAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBReqQueryAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBReqQueryAccount::GetClassData() const { return &_class_data_; }

void DBReqQueryAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBReqQueryAccount *>(to)->MergeFrom(
      static_cast<const DBReqQueryAccount &>(from));
}


void DBReqQueryAccount::MergeFrom(const DBReqQueryAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBReqQueryAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBReqQueryAccount::CopyFrom(const DBReqQueryAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBReqQueryAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReqQueryAccount::IsInitialized() const {
  return true;
}

void DBReqQueryAccount::InternalSwap(DBReqQueryAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DBReqQueryAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[4]);
}

// ===================================================================

class DBRspAccout::_Internal {
 public:
};

DBRspAccout::DBRspAccout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBRspAccout)
}
DBRspAccout::DBRspAccout(const DBRspAccout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    passwd_.Set(from._internal_passwd(), 
      GetArenaForAllocation());
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBRspAccout)
}

inline void DBRspAccout::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
passwd_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  passwd_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
roleid_ = uint64_t{0u};
}

DBRspAccout::~DBRspAccout() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBRspAccout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBRspAccout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
  passwd_.Destroy();
}

void DBRspAccout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBRspAccout::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBRspAccout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  passwd_.ClearToEmpty();
  roleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRspAccout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBRspAccout.account"));
        } else
          goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBRspAccout.passwd"));
        } else
          goto handle_unusual;
        continue;
      // uint64 roleid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRspAccout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBRspAccout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBRspAccout.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBRspAccout.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  // uint64 roleid = 3;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBRspAccout)
  return target;
}

size_t DBRspAccout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBRspAccout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  // uint64 roleid = 3;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRspAccout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBRspAccout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRspAccout::GetClassData() const { return &_class_data_; }

void DBRspAccout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBRspAccout *>(to)->MergeFrom(
      static_cast<const DBRspAccout &>(from));
}


void DBRspAccout::MergeFrom(const DBRspAccout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBRspAccout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (!from._internal_passwd().empty()) {
    _internal_set_passwd(from._internal_passwd());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRspAccout::CopyFrom(const DBRspAccout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBRspAccout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRspAccout::IsInitialized() const {
  return true;
}

void DBRspAccout::InternalSwap(DBRspAccout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &passwd_, lhs_arena,
      &other->passwd_, rhs_arena
  );
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRspAccout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[5]);
}

// ===================================================================

class DBReqModAccount::_Internal {
 public:
};

DBReqModAccount::DBReqModAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBReqModAccount)
}
DBReqModAccount::DBReqModAccount(const DBReqModAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    account_.Set(from._internal_account(), 
      GetArenaForAllocation());
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBReqModAccount)
}

inline void DBReqModAccount::SharedCtor() {
account_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
roleid_ = uint64_t{0u};
}

DBReqModAccount::~DBReqModAccount() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBReqModAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBReqModAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.Destroy();
}

void DBReqModAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBReqModAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBReqModAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  roleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBReqModAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBReqModAccount.account"));
        } else
          goto handle_unusual;
        continue;
      // uint64 roleid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBReqModAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBReqModAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBReqModAccount.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // uint64 roleid = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBReqModAccount)
  return target;
}

size_t DBReqModAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBReqModAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // uint64 roleid = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBReqModAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBReqModAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBReqModAccount::GetClassData() const { return &_class_data_; }

void DBReqModAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBReqModAccount *>(to)->MergeFrom(
      static_cast<const DBReqModAccount &>(from));
}


void DBReqModAccount::MergeFrom(const DBReqModAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBReqModAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBReqModAccount::CopyFrom(const DBReqModAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBReqModAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReqModAccount::IsInitialized() const {
  return true;
}

void DBReqModAccount::InternalSwap(DBReqModAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &account_, lhs_arena,
      &other->account_, rhs_arena
  );
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBReqModAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[6]);
}

// ===================================================================

class DBReqQueryRole::_Internal {
 public:
};

DBReqQueryRole::DBReqQueryRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBReqQueryRole)
}
DBReqQueryRole::DBReqQueryRole(const DBReqQueryRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBReqQueryRole)
}

inline void DBReqQueryRole::SharedCtor() {
roleid_ = uint64_t{0u};
}

DBReqQueryRole::~DBReqQueryRole() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBReqQueryRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBReqQueryRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBReqQueryRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBReqQueryRole::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBReqQueryRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBReqQueryRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBReqQueryRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBReqQueryRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBReqQueryRole)
  return target;
}

size_t DBReqQueryRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBReqQueryRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBReqQueryRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBReqQueryRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBReqQueryRole::GetClassData() const { return &_class_data_; }

void DBReqQueryRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBReqQueryRole *>(to)->MergeFrom(
      static_cast<const DBReqQueryRole &>(from));
}


void DBReqQueryRole::MergeFrom(const DBReqQueryRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBReqQueryRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBReqQueryRole::CopyFrom(const DBReqQueryRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBReqQueryRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReqQueryRole::IsInitialized() const {
  return true;
}

void DBReqQueryRole::InternalSwap(DBReqQueryRole* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBReqQueryRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[7]);
}

// ===================================================================

class DBReqAddRole::_Internal {
 public:
};

DBReqAddRole::DBReqAddRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBReqAddRole)
}
DBReqAddRole::DBReqAddRole(const DBReqAddRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBReqAddRole)
}

inline void DBReqAddRole::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
roleid_ = uint64_t{0u};
}

DBReqAddRole::~DBReqAddRole() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBReqAddRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBReqAddRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void DBReqAddRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBReqAddRole::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBReqAddRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  roleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBReqAddRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBReqAddRole.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBReqAddRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBReqAddRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBReqAddRole.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBReqAddRole)
  return target;
}

size_t DBReqAddRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBReqAddRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBReqAddRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBReqAddRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBReqAddRole::GetClassData() const { return &_class_data_; }

void DBReqAddRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBReqAddRole *>(to)->MergeFrom(
      static_cast<const DBReqAddRole &>(from));
}


void DBReqAddRole::MergeFrom(const DBReqAddRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBReqAddRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBReqAddRole::CopyFrom(const DBReqAddRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBReqAddRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReqAddRole::IsInitialized() const {
  return true;
}

void DBReqAddRole::InternalSwap(DBReqAddRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBReqAddRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[8]);
}

// ===================================================================

class DBRspRole::_Internal {
 public:
};

DBRspRole::DBRspRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGameDB.DBRspRole)
}
DBRspRole::DBRspRole(const DBRspRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:MyGameDB.DBRspRole)
}

inline void DBRspRole::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(level_));
}

DBRspRole::~DBRspRole() {
  // @@protoc_insertion_point(destructor:MyGameDB.DBRspRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBRspRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void DBRspRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBRspRole::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGameDB.DBRspRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRspRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGameDB.DBRspRole.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRspRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGameDB.DBRspRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGameDB.DBRspRole.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGameDB.DBRspRole)
  return target;
}

size_t DBRspRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGameDB.DBRspRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRspRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBRspRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRspRole::GetClassData() const { return &_class_data_; }

void DBRspRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBRspRole *>(to)->MergeFrom(
      static_cast<const DBRspRole &>(from));
}


void DBRspRole::MergeFrom(const DBRspRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGameDB.DBRspRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRspRole::CopyFrom(const DBRspRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGameDB.DBRspRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRspRole::IsInitialized() const {
  return true;
}

void DBRspRole::InternalSwap(DBRspRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBRspRole, level_)
      + sizeof(DBRspRole::level_)
      - PROTOBUF_FIELD_OFFSET(DBRspRole, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRspRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dbmsg_2eproto_getter, &descriptor_table_dbmsg_2eproto_once,
      file_level_metadata_dbmsg_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MyGameDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MyGameDB::DBReqHead*
Arena::CreateMaybeMessage< ::MyGameDB::DBReqHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBReqHead >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBRequest*
Arena::CreateMaybeMessage< ::MyGameDB::DBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::QRsqHead*
Arena::CreateMaybeMessage< ::MyGameDB::QRsqHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::QRsqHead >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBResponse*
Arena::CreateMaybeMessage< ::MyGameDB::DBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBReqQueryAccount*
Arena::CreateMaybeMessage< ::MyGameDB::DBReqQueryAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBReqQueryAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBRspAccout*
Arena::CreateMaybeMessage< ::MyGameDB::DBRspAccout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBRspAccout >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBReqModAccount*
Arena::CreateMaybeMessage< ::MyGameDB::DBReqModAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBReqModAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBReqQueryRole*
Arena::CreateMaybeMessage< ::MyGameDB::DBReqQueryRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBReqQueryRole >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBReqAddRole*
Arena::CreateMaybeMessage< ::MyGameDB::DBReqAddRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBReqAddRole >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGameDB::DBRspRole*
Arena::CreateMaybeMessage< ::MyGameDB::DBRspRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGameDB::DBRspRole >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
