// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbmsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dbmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dbmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dbmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dbmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dbmsg_2eproto;
namespace MyGameDB {
class DBReqAddRole;
struct DBReqAddRoleDefaultTypeInternal;
extern DBReqAddRoleDefaultTypeInternal _DBReqAddRole_default_instance_;
class DBReqHead;
struct DBReqHeadDefaultTypeInternal;
extern DBReqHeadDefaultTypeInternal _DBReqHead_default_instance_;
class DBReqModAccount;
struct DBReqModAccountDefaultTypeInternal;
extern DBReqModAccountDefaultTypeInternal _DBReqModAccount_default_instance_;
class DBReqQueryAccount;
struct DBReqQueryAccountDefaultTypeInternal;
extern DBReqQueryAccountDefaultTypeInternal _DBReqQueryAccount_default_instance_;
class DBReqQueryRole;
struct DBReqQueryRoleDefaultTypeInternal;
extern DBReqQueryRoleDefaultTypeInternal _DBReqQueryRole_default_instance_;
class DBRequest;
struct DBRequestDefaultTypeInternal;
extern DBRequestDefaultTypeInternal _DBRequest_default_instance_;
class DBResponse;
struct DBResponseDefaultTypeInternal;
extern DBResponseDefaultTypeInternal _DBResponse_default_instance_;
class DBRspAccout;
struct DBRspAccoutDefaultTypeInternal;
extern DBRspAccoutDefaultTypeInternal _DBRspAccout_default_instance_;
class DBRspRole;
struct DBRspRoleDefaultTypeInternal;
extern DBRspRoleDefaultTypeInternal _DBRspRole_default_instance_;
class QRsqHead;
struct QRsqHeadDefaultTypeInternal;
extern QRsqHeadDefaultTypeInternal _QRsqHead_default_instance_;
}  // namespace MyGameDB
PROTOBUF_NAMESPACE_OPEN
template<> ::MyGameDB::DBReqAddRole* Arena::CreateMaybeMessage<::MyGameDB::DBReqAddRole>(Arena*);
template<> ::MyGameDB::DBReqHead* Arena::CreateMaybeMessage<::MyGameDB::DBReqHead>(Arena*);
template<> ::MyGameDB::DBReqModAccount* Arena::CreateMaybeMessage<::MyGameDB::DBReqModAccount>(Arena*);
template<> ::MyGameDB::DBReqQueryAccount* Arena::CreateMaybeMessage<::MyGameDB::DBReqQueryAccount>(Arena*);
template<> ::MyGameDB::DBReqQueryRole* Arena::CreateMaybeMessage<::MyGameDB::DBReqQueryRole>(Arena*);
template<> ::MyGameDB::DBRequest* Arena::CreateMaybeMessage<::MyGameDB::DBRequest>(Arena*);
template<> ::MyGameDB::DBResponse* Arena::CreateMaybeMessage<::MyGameDB::DBResponse>(Arena*);
template<> ::MyGameDB::DBRspAccout* Arena::CreateMaybeMessage<::MyGameDB::DBRspAccout>(Arena*);
template<> ::MyGameDB::DBRspRole* Arena::CreateMaybeMessage<::MyGameDB::DBRspRole>(Arena*);
template<> ::MyGameDB::QRsqHead* Arena::CreateMaybeMessage<::MyGameDB::QRsqHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MyGameDB {

enum DBErrorType : int {
  DBErr_OK = 0,
  DBErr_Fail = 1,
  DBErr_NotExist = 2,
  DBErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DBErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DBErrorType_IsValid(int value);
constexpr DBErrorType DBErrorType_MIN = DBErr_OK;
constexpr DBErrorType DBErrorType_MAX = DBErr_NotExist;
constexpr int DBErrorType_ARRAYSIZE = DBErrorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBErrorType_descriptor();
template<typename T>
inline const std::string& DBErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DBErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DBErrorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DBErrorType_descriptor(), enum_t_value);
}
inline bool DBErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DBErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DBErrorType>(
    DBErrorType_descriptor(), name, value);
}
enum DBReqType : int {
  DBReqType_Default = 0,
  DBReqType_QueryAccount = 1,
  DBReqType_ModAccount = 2,
  DBReqType_QueryRole = 3,
  DBReqType_AddRole = 4,
  DBReqType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DBReqType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DBReqType_IsValid(int value);
constexpr DBReqType DBReqType_MIN = DBReqType_Default;
constexpr DBReqType DBReqType_MAX = DBReqType_AddRole;
constexpr int DBReqType_ARRAYSIZE = DBReqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBReqType_descriptor();
template<typename T>
inline const std::string& DBReqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DBReqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DBReqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DBReqType_descriptor(), enum_t_value);
}
inline bool DBReqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DBReqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DBReqType>(
    DBReqType_descriptor(), name, value);
}
// ===================================================================

class DBReqHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBReqHead) */ {
 public:
  inline DBReqHead() : DBReqHead(nullptr) {}
  ~DBReqHead() override;
  explicit PROTOBUF_CONSTEXPR DBReqHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBReqHead(const DBReqHead& from);
  DBReqHead(DBReqHead&& from) noexcept
    : DBReqHead() {
    *this = ::std::move(from);
  }

  inline DBReqHead& operator=(const DBReqHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBReqHead& operator=(DBReqHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBReqHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBReqHead* internal_default_instance() {
    return reinterpret_cast<const DBReqHead*>(
               &_DBReqHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBReqHead& a, DBReqHead& b) {
    a.Swap(&b);
  }
  inline void Swap(DBReqHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBReqHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBReqHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBReqHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBReqHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBReqHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBReqHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBReqHead";
  }
  protected:
  explicit DBReqHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .MyGameDB.DBReqType type = 1;
  void clear_type();
  ::MyGameDB::DBReqType type() const;
  void set_type(::MyGameDB::DBReqType value);
  private:
  ::MyGameDB::DBReqType _internal_type() const;
  void _internal_set_type(::MyGameDB::DBReqType value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBReqHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBRequest) */ {
 public:
  inline DBRequest() : DBRequest(nullptr) {}
  ~DBRequest() override;
  explicit PROTOBUF_CONSTEXPR DBRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRequest(const DBRequest& from);
  DBRequest(DBRequest&& from) noexcept
    : DBRequest() {
    *this = ::std::move(from);
  }

  inline DBRequest& operator=(const DBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRequest& operator=(DBRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRequest* internal_default_instance() {
    return reinterpret_cast<const DBRequest*>(
               &_DBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBRequest& a, DBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBRequest";
  }
  protected:
  explicit DBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeadFieldNumber = 1,
  };
  // string payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .MyGameDB.DBReqHead head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::MyGameDB::DBReqHead& head() const;
  PROTOBUF_NODISCARD ::MyGameDB::DBReqHead* release_head();
  ::MyGameDB::DBReqHead* mutable_head();
  void set_allocated_head(::MyGameDB::DBReqHead* head);
  private:
  const ::MyGameDB::DBReqHead& _internal_head() const;
  ::MyGameDB::DBReqHead* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::MyGameDB::DBReqHead* head);
  ::MyGameDB::DBReqHead* unsafe_arena_release_head();

  // @@protoc_insertion_point(class_scope:MyGameDB.DBRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::MyGameDB::DBReqHead* head_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class QRsqHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.QRsqHead) */ {
 public:
  inline QRsqHead() : QRsqHead(nullptr) {}
  ~QRsqHead() override;
  explicit PROTOBUF_CONSTEXPR QRsqHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QRsqHead(const QRsqHead& from);
  QRsqHead(QRsqHead&& from) noexcept
    : QRsqHead() {
    *this = ::std::move(from);
  }

  inline QRsqHead& operator=(const QRsqHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline QRsqHead& operator=(QRsqHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QRsqHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const QRsqHead* internal_default_instance() {
    return reinterpret_cast<const QRsqHead*>(
               &_QRsqHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QRsqHead& a, QRsqHead& b) {
    a.Swap(&b);
  }
  inline void Swap(QRsqHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QRsqHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QRsqHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QRsqHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QRsqHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QRsqHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QRsqHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.QRsqHead";
  }
  protected:
  explicit QRsqHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kResFieldNumber = 2,
  };
  // .MyGameDB.DBReqType type = 1;
  void clear_type();
  ::MyGameDB::DBReqType type() const;
  void set_type(::MyGameDB::DBReqType value);
  private:
  ::MyGameDB::DBReqType _internal_type() const;
  void _internal_set_type(::MyGameDB::DBReqType value);
  public:

  // .MyGameDB.DBErrorType res = 2;
  void clear_res();
  ::MyGameDB::DBErrorType res() const;
  void set_res(::MyGameDB::DBErrorType value);
  private:
  ::MyGameDB::DBErrorType _internal_res() const;
  void _internal_set_res(::MyGameDB::DBErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.QRsqHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBResponse) */ {
 public:
  inline DBResponse() : DBResponse(nullptr) {}
  ~DBResponse() override;
  explicit PROTOBUF_CONSTEXPR DBResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBResponse(const DBResponse& from);
  DBResponse(DBResponse&& from) noexcept
    : DBResponse() {
    *this = ::std::move(from);
  }

  inline DBResponse& operator=(const DBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBResponse& operator=(DBResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBResponse* internal_default_instance() {
    return reinterpret_cast<const DBResponse*>(
               &_DBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DBResponse& a, DBResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DBResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBResponse";
  }
  protected:
  explicit DBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeadFieldNumber = 1,
  };
  // string payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .MyGameDB.QRsqHead head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::MyGameDB::QRsqHead& head() const;
  PROTOBUF_NODISCARD ::MyGameDB::QRsqHead* release_head();
  ::MyGameDB::QRsqHead* mutable_head();
  void set_allocated_head(::MyGameDB::QRsqHead* head);
  private:
  const ::MyGameDB::QRsqHead& _internal_head() const;
  ::MyGameDB::QRsqHead* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::MyGameDB::QRsqHead* head);
  ::MyGameDB::QRsqHead* unsafe_arena_release_head();

  // @@protoc_insertion_point(class_scope:MyGameDB.DBResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::MyGameDB::QRsqHead* head_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBReqQueryAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBReqQueryAccount) */ {
 public:
  inline DBReqQueryAccount() : DBReqQueryAccount(nullptr) {}
  ~DBReqQueryAccount() override;
  explicit PROTOBUF_CONSTEXPR DBReqQueryAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBReqQueryAccount(const DBReqQueryAccount& from);
  DBReqQueryAccount(DBReqQueryAccount&& from) noexcept
    : DBReqQueryAccount() {
    *this = ::std::move(from);
  }

  inline DBReqQueryAccount& operator=(const DBReqQueryAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBReqQueryAccount& operator=(DBReqQueryAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBReqQueryAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBReqQueryAccount* internal_default_instance() {
    return reinterpret_cast<const DBReqQueryAccount*>(
               &_DBReqQueryAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DBReqQueryAccount& a, DBReqQueryAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(DBReqQueryAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBReqQueryAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBReqQueryAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBReqQueryAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBReqQueryAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBReqQueryAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBReqQueryAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBReqQueryAccount";
  }
  protected:
  explicit DBReqQueryAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBReqQueryAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBRspAccout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBRspAccout) */ {
 public:
  inline DBRspAccout() : DBRspAccout(nullptr) {}
  ~DBRspAccout() override;
  explicit PROTOBUF_CONSTEXPR DBRspAccout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRspAccout(const DBRspAccout& from);
  DBRspAccout(DBRspAccout&& from) noexcept
    : DBRspAccout() {
    *this = ::std::move(from);
  }

  inline DBRspAccout& operator=(const DBRspAccout& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRspAccout& operator=(DBRspAccout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRspAccout& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRspAccout* internal_default_instance() {
    return reinterpret_cast<const DBRspAccout*>(
               &_DBRspAccout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DBRspAccout& a, DBRspAccout& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRspAccout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRspAccout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRspAccout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRspAccout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRspAccout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRspAccout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRspAccout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBRspAccout";
  }
  protected:
  explicit DBRspAccout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswdFieldNumber = 2,
    kRoleidFieldNumber = 3,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // uint64 roleid = 3;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBRspAccout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBReqModAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBReqModAccount) */ {
 public:
  inline DBReqModAccount() : DBReqModAccount(nullptr) {}
  ~DBReqModAccount() override;
  explicit PROTOBUF_CONSTEXPR DBReqModAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBReqModAccount(const DBReqModAccount& from);
  DBReqModAccount(DBReqModAccount&& from) noexcept
    : DBReqModAccount() {
    *this = ::std::move(from);
  }

  inline DBReqModAccount& operator=(const DBReqModAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBReqModAccount& operator=(DBReqModAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBReqModAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBReqModAccount* internal_default_instance() {
    return reinterpret_cast<const DBReqModAccount*>(
               &_DBReqModAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DBReqModAccount& a, DBReqModAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(DBReqModAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBReqModAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBReqModAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBReqModAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBReqModAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBReqModAccount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBReqModAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBReqModAccount";
  }
  protected:
  explicit DBReqModAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kRoleidFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // uint64 roleid = 2;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBReqModAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBReqQueryRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBReqQueryRole) */ {
 public:
  inline DBReqQueryRole() : DBReqQueryRole(nullptr) {}
  ~DBReqQueryRole() override;
  explicit PROTOBUF_CONSTEXPR DBReqQueryRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBReqQueryRole(const DBReqQueryRole& from);
  DBReqQueryRole(DBReqQueryRole&& from) noexcept
    : DBReqQueryRole() {
    *this = ::std::move(from);
  }

  inline DBReqQueryRole& operator=(const DBReqQueryRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBReqQueryRole& operator=(DBReqQueryRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBReqQueryRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBReqQueryRole* internal_default_instance() {
    return reinterpret_cast<const DBReqQueryRole*>(
               &_DBReqQueryRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBReqQueryRole& a, DBReqQueryRole& b) {
    a.Swap(&b);
  }
  inline void Swap(DBReqQueryRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBReqQueryRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBReqQueryRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBReqQueryRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBReqQueryRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBReqQueryRole& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBReqQueryRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBReqQueryRole";
  }
  protected:
  explicit DBReqQueryRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleidFieldNumber = 1,
  };
  // uint64 roleid = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBReqQueryRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBReqAddRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBReqAddRole) */ {
 public:
  inline DBReqAddRole() : DBReqAddRole(nullptr) {}
  ~DBReqAddRole() override;
  explicit PROTOBUF_CONSTEXPR DBReqAddRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBReqAddRole(const DBReqAddRole& from);
  DBReqAddRole(DBReqAddRole&& from) noexcept
    : DBReqAddRole() {
    *this = ::std::move(from);
  }

  inline DBReqAddRole& operator=(const DBReqAddRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBReqAddRole& operator=(DBReqAddRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBReqAddRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBReqAddRole* internal_default_instance() {
    return reinterpret_cast<const DBReqAddRole*>(
               &_DBReqAddRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DBReqAddRole& a, DBReqAddRole& b) {
    a.Swap(&b);
  }
  inline void Swap(DBReqAddRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBReqAddRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBReqAddRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBReqAddRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBReqAddRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBReqAddRole& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBReqAddRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBReqAddRole";
  }
  protected:
  explicit DBReqAddRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRoleidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 roleid = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBReqAddRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// -------------------------------------------------------------------

class DBRspRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyGameDB.DBRspRole) */ {
 public:
  inline DBRspRole() : DBRspRole(nullptr) {}
  ~DBRspRole() override;
  explicit PROTOBUF_CONSTEXPR DBRspRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRspRole(const DBRspRole& from);
  DBRspRole(DBRspRole&& from) noexcept
    : DBRspRole() {
    *this = ::std::move(from);
  }

  inline DBRspRole& operator=(const DBRspRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRspRole& operator=(DBRspRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRspRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRspRole* internal_default_instance() {
    return reinterpret_cast<const DBRspRole*>(
               &_DBRspRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DBRspRole& a, DBRspRole& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRspRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRspRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRspRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRspRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRspRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBRspRole& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRspRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyGameDB.DBRspRole";
  }
  protected:
  explicit DBRspRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRoleidFieldNumber = 1,
    kLevelFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 roleid = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // int32 level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MyGameDB.DBRspRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t roleid_;
  int32_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dbmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBReqHead

// .MyGameDB.DBReqType type = 1;
inline void DBReqHead::clear_type() {
  type_ = 0;
}
inline ::MyGameDB::DBReqType DBReqHead::_internal_type() const {
  return static_cast< ::MyGameDB::DBReqType >(type_);
}
inline ::MyGameDB::DBReqType DBReqHead::type() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqHead.type)
  return _internal_type();
}
inline void DBReqHead::_internal_set_type(::MyGameDB::DBReqType value) {
  
  type_ = value;
}
inline void DBReqHead::set_type(::MyGameDB::DBReqType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqHead.type)
}

// -------------------------------------------------------------------

// DBRequest

// .MyGameDB.DBReqHead head = 1;
inline bool DBRequest::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool DBRequest::has_head() const {
  return _internal_has_head();
}
inline void DBRequest::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::MyGameDB::DBReqHead& DBRequest::_internal_head() const {
  const ::MyGameDB::DBReqHead* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::MyGameDB::DBReqHead&>(
      ::MyGameDB::_DBReqHead_default_instance_);
}
inline const ::MyGameDB::DBReqHead& DBRequest::head() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRequest.head)
  return _internal_head();
}
inline void DBRequest::unsafe_arena_set_allocated_head(
    ::MyGameDB::DBReqHead* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyGameDB.DBRequest.head)
}
inline ::MyGameDB::DBReqHead* DBRequest::release_head() {
  
  ::MyGameDB::DBReqHead* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MyGameDB::DBReqHead* DBRequest::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBRequest.head)
  
  ::MyGameDB::DBReqHead* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::MyGameDB::DBReqHead* DBRequest::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyGameDB::DBReqHead>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::MyGameDB::DBReqHead* DBRequest::mutable_head() {
  ::MyGameDB::DBReqHead* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBRequest.head)
  return _msg;
}
inline void DBRequest::set_allocated_head(::MyGameDB::DBReqHead* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBRequest.head)
}

// string payload = 2;
inline void DBRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& DBRequest::payload() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBRequest.payload)
}
inline std::string* DBRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBRequest.payload)
  return _s;
}
inline const std::string& DBRequest::_internal_payload() const {
  return payload_.Get();
}
inline void DBRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(value, GetArenaForAllocation());
}
inline std::string* DBRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(GetArenaForAllocation());
}
inline std::string* DBRequest::release_payload() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBRequest.payload)
  return payload_.Release();
}
inline void DBRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBRequest.payload)
}

// -------------------------------------------------------------------

// QRsqHead

// .MyGameDB.DBReqType type = 1;
inline void QRsqHead::clear_type() {
  type_ = 0;
}
inline ::MyGameDB::DBReqType QRsqHead::_internal_type() const {
  return static_cast< ::MyGameDB::DBReqType >(type_);
}
inline ::MyGameDB::DBReqType QRsqHead::type() const {
  // @@protoc_insertion_point(field_get:MyGameDB.QRsqHead.type)
  return _internal_type();
}
inline void QRsqHead::_internal_set_type(::MyGameDB::DBReqType value) {
  
  type_ = value;
}
inline void QRsqHead::set_type(::MyGameDB::DBReqType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MyGameDB.QRsqHead.type)
}

// .MyGameDB.DBErrorType res = 2;
inline void QRsqHead::clear_res() {
  res_ = 0;
}
inline ::MyGameDB::DBErrorType QRsqHead::_internal_res() const {
  return static_cast< ::MyGameDB::DBErrorType >(res_);
}
inline ::MyGameDB::DBErrorType QRsqHead::res() const {
  // @@protoc_insertion_point(field_get:MyGameDB.QRsqHead.res)
  return _internal_res();
}
inline void QRsqHead::_internal_set_res(::MyGameDB::DBErrorType value) {
  
  res_ = value;
}
inline void QRsqHead::set_res(::MyGameDB::DBErrorType value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:MyGameDB.QRsqHead.res)
}

// -------------------------------------------------------------------

// DBResponse

// .MyGameDB.QRsqHead head = 1;
inline bool DBResponse::_internal_has_head() const {
  return this != internal_default_instance() && head_ != nullptr;
}
inline bool DBResponse::has_head() const {
  return _internal_has_head();
}
inline void DBResponse::clear_head() {
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
}
inline const ::MyGameDB::QRsqHead& DBResponse::_internal_head() const {
  const ::MyGameDB::QRsqHead* p = head_;
  return p != nullptr ? *p : reinterpret_cast<const ::MyGameDB::QRsqHead&>(
      ::MyGameDB::_QRsqHead_default_instance_);
}
inline const ::MyGameDB::QRsqHead& DBResponse::head() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBResponse.head)
  return _internal_head();
}
inline void DBResponse::unsafe_arena_set_allocated_head(
    ::MyGameDB::QRsqHead* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_);
  }
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyGameDB.DBResponse.head)
}
inline ::MyGameDB::QRsqHead* DBResponse::release_head() {
  
  ::MyGameDB::QRsqHead* temp = head_;
  head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::MyGameDB::QRsqHead* DBResponse::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBResponse.head)
  
  ::MyGameDB::QRsqHead* temp = head_;
  head_ = nullptr;
  return temp;
}
inline ::MyGameDB::QRsqHead* DBResponse::_internal_mutable_head() {
  
  if (head_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyGameDB::QRsqHead>(GetArenaForAllocation());
    head_ = p;
  }
  return head_;
}
inline ::MyGameDB::QRsqHead* DBResponse::mutable_head() {
  ::MyGameDB::QRsqHead* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBResponse.head)
  return _msg;
}
inline void DBResponse::set_allocated_head(::MyGameDB::QRsqHead* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBResponse.head)
}

// string payload = 2;
inline void DBResponse::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& DBResponse::payload() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBResponse.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBResponse::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBResponse.payload)
}
inline std::string* DBResponse::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBResponse.payload)
  return _s;
}
inline const std::string& DBResponse::_internal_payload() const {
  return payload_.Get();
}
inline void DBResponse::_internal_set_payload(const std::string& value) {
  
  payload_.Set(value, GetArenaForAllocation());
}
inline std::string* DBResponse::_internal_mutable_payload() {
  
  return payload_.Mutable(GetArenaForAllocation());
}
inline std::string* DBResponse::release_payload() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBResponse.payload)
  return payload_.Release();
}
inline void DBResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault()) {
    payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBResponse.payload)
}

// -------------------------------------------------------------------

// DBReqQueryAccount

// string account = 1;
inline void DBReqQueryAccount::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& DBReqQueryAccount::account() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqQueryAccount.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBReqQueryAccount::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqQueryAccount.account)
}
inline std::string* DBReqQueryAccount::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBReqQueryAccount.account)
  return _s;
}
inline const std::string& DBReqQueryAccount::_internal_account() const {
  return account_.Get();
}
inline void DBReqQueryAccount::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* DBReqQueryAccount::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* DBReqQueryAccount::release_account() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBReqQueryAccount.account)
  return account_.Release();
}
inline void DBReqQueryAccount::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBReqQueryAccount.account)
}

// -------------------------------------------------------------------

// DBRspAccout

// string account = 1;
inline void DBRspAccout::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& DBRspAccout::account() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRspAccout.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRspAccout::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBRspAccout.account)
}
inline std::string* DBRspAccout::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBRspAccout.account)
  return _s;
}
inline const std::string& DBRspAccout::_internal_account() const {
  return account_.Get();
}
inline void DBRspAccout::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* DBRspAccout::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* DBRspAccout::release_account() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBRspAccout.account)
  return account_.Release();
}
inline void DBRspAccout::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBRspAccout.account)
}

// string passwd = 2;
inline void DBRspAccout::clear_passwd() {
  passwd_.ClearToEmpty();
}
inline const std::string& DBRspAccout::passwd() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRspAccout.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRspAccout::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 passwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBRspAccout.passwd)
}
inline std::string* DBRspAccout::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBRspAccout.passwd)
  return _s;
}
inline const std::string& DBRspAccout::_internal_passwd() const {
  return passwd_.Get();
}
inline void DBRspAccout::_internal_set_passwd(const std::string& value) {
  
  passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* DBRspAccout::_internal_mutable_passwd() {
  
  return passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* DBRspAccout::release_passwd() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBRspAccout.passwd)
  return passwd_.Release();
}
inline void DBRspAccout::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (passwd_.IsDefault()) {
    passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBRspAccout.passwd)
}

// uint64 roleid = 3;
inline void DBRspAccout::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t DBRspAccout::_internal_roleid() const {
  return roleid_;
}
inline uint64_t DBRspAccout::roleid() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRspAccout.roleid)
  return _internal_roleid();
}
inline void DBRspAccout::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void DBRspAccout::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBRspAccout.roleid)
}

// -------------------------------------------------------------------

// DBReqModAccount

// string account = 1;
inline void DBReqModAccount::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& DBReqModAccount::account() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqModAccount.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBReqModAccount::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqModAccount.account)
}
inline std::string* DBReqModAccount::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBReqModAccount.account)
  return _s;
}
inline const std::string& DBReqModAccount::_internal_account() const {
  return account_.Get();
}
inline void DBReqModAccount::_internal_set_account(const std::string& value) {
  
  account_.Set(value, GetArenaForAllocation());
}
inline std::string* DBReqModAccount::_internal_mutable_account() {
  
  return account_.Mutable(GetArenaForAllocation());
}
inline std::string* DBReqModAccount::release_account() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBReqModAccount.account)
  return account_.Release();
}
inline void DBReqModAccount::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault()) {
    account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBReqModAccount.account)
}

// uint64 roleid = 2;
inline void DBReqModAccount::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t DBReqModAccount::_internal_roleid() const {
  return roleid_;
}
inline uint64_t DBReqModAccount::roleid() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqModAccount.roleid)
  return _internal_roleid();
}
inline void DBReqModAccount::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void DBReqModAccount::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqModAccount.roleid)
}

// -------------------------------------------------------------------

// DBReqQueryRole

// uint64 roleid = 1;
inline void DBReqQueryRole::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t DBReqQueryRole::_internal_roleid() const {
  return roleid_;
}
inline uint64_t DBReqQueryRole::roleid() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqQueryRole.roleid)
  return _internal_roleid();
}
inline void DBReqQueryRole::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void DBReqQueryRole::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqQueryRole.roleid)
}

// -------------------------------------------------------------------

// DBReqAddRole

// uint64 roleid = 1;
inline void DBReqAddRole::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t DBReqAddRole::_internal_roleid() const {
  return roleid_;
}
inline uint64_t DBReqAddRole::roleid() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqAddRole.roleid)
  return _internal_roleid();
}
inline void DBReqAddRole::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void DBReqAddRole::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqAddRole.roleid)
}

// string name = 2;
inline void DBReqAddRole::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DBReqAddRole::name() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBReqAddRole.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBReqAddRole::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBReqAddRole.name)
}
inline std::string* DBReqAddRole::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBReqAddRole.name)
  return _s;
}
inline const std::string& DBReqAddRole::_internal_name() const {
  return name_.Get();
}
inline void DBReqAddRole::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DBReqAddRole::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DBReqAddRole::release_name() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBReqAddRole.name)
  return name_.Release();
}
inline void DBReqAddRole::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBReqAddRole.name)
}

// -------------------------------------------------------------------

// DBRspRole

// uint64 roleid = 1;
inline void DBRspRole::clear_roleid() {
  roleid_ = uint64_t{0u};
}
inline uint64_t DBRspRole::_internal_roleid() const {
  return roleid_;
}
inline uint64_t DBRspRole::roleid() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRspRole.roleid)
  return _internal_roleid();
}
inline void DBRspRole::_internal_set_roleid(uint64_t value) {
  
  roleid_ = value;
}
inline void DBRspRole::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBRspRole.roleid)
}

// string name = 2;
inline void DBRspRole::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DBRspRole::name() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRspRole.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRspRole::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MyGameDB.DBRspRole.name)
}
inline std::string* DBRspRole::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:MyGameDB.DBRspRole.name)
  return _s;
}
inline const std::string& DBRspRole::_internal_name() const {
  return name_.Get();
}
inline void DBRspRole::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DBRspRole::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DBRspRole::release_name() {
  // @@protoc_insertion_point(field_release:MyGameDB.DBRspRole.name)
  return name_.Release();
}
inline void DBRspRole::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MyGameDB.DBRspRole.name)
}

// int32 level = 3;
inline void DBRspRole::clear_level() {
  level_ = 0;
}
inline int32_t DBRspRole::_internal_level() const {
  return level_;
}
inline int32_t DBRspRole::level() const {
  // @@protoc_insertion_point(field_get:MyGameDB.DBRspRole.level)
  return _internal_level();
}
inline void DBRspRole::_internal_set_level(int32_t value) {
  
  level_ = value;
}
inline void DBRspRole::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:MyGameDB.DBRspRole.level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyGameDB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MyGameDB::DBErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MyGameDB::DBErrorType>() {
  return ::MyGameDB::DBErrorType_descriptor();
}
template <> struct is_proto_enum< ::MyGameDB::DBReqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MyGameDB::DBReqType>() {
  return ::MyGameDB::DBReqType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dbmsg_2eproto
